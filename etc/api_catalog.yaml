openapi: 3.0.3
info:
  title: Project Healthy
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server
  - url: http://localhost:8081
    description: ThingSpeak API server
paths:
  /patient:
    get:
      summary: Retrieve a list of patients or a specific patient by ID
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          description: Patient ID (optional)
      responses:
        '200':
          description: List of patients or a single patient
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
    post:
      summary: Create a new patient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created successfully
    put:
      summary: Update an existing patient
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Patient ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated successfully
    delete:
      summary: Delete a patient by ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Patient ID
      responses:
        '200':
          description: Patient deleted successfully

  /device:
    get:
      summary: Retrieve a list of devices or a specific device by ID
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          description: Device ID (optional)
      responses:
        '200':
          description: List of devices or a single device
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      summary: Create a new device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: Device created successfully
    put:
      summary: Update an existing device
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Device ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device updated successfully
    delete:
      summary: Delete a device by ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Device ID
      responses:
        '200':
          description: Device deleted successfully

  /entity:
    get:
      summary: Retrieve a list of device entities or a specific device entity by ID
      parameters:
        - name: id
          in: query
          schema:
            type: integer
          description: Device Entity ID (optional)
      responses:
        '200':
          description: List of device entities or a single entity
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceEntity'
    post:
      summary: Create a new device entity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceEntity'
      responses:
        '201':
          description: Device entity created successfully
    put:
      summary: Update an existing device entity
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Device Entity ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceEntity'
      responses:
        '200':
          description: Device entity updated successfully
    delete:
      summary: Delete a device entity by ID
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: integer
          description: Device Entity ID
      responses:
        '200':
          description: Device entity deleted successfully

  /telegrambot:
    get:
      summary: Retrieve a list of Telegram bots or a specific bot by ID
      parameters:
        - name: bot_id
          in: query
          schema:
            type: integer
          description: Bot ID (optional)
      responses:
        '200':
          description: List of Telegram bots or a single bot
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TelegramBot'
    post:
      summary: Create a new Telegram bot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramBot'
      responses:
        '201':
          description: Telegram bot created successfully
    put:
      summary: Update an existing Telegram bot
      parameters:
        - name: bot_id
          in: query
          required: true
          schema:
            type: integer
          description: Bot ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelegramBot'
      responses:
        '200':
          description: Telegram bot updated successfully
    delete:
      summary: Delete a Telegram bot by ID
      parameters:
        - name: bot_id
          in: query
          required: true
          schema:
            type: integer
          description: Bot ID
      responses:
        '200':
          description: Telegram bot deleted successfully

  /endpoints:
    get:
      summary: Retrieve a list of endpoints or a specific endpoint by ID
      parameters:
        - name: endpoint_id
          in: query
          schema:
            type: integer
          description: Endpoint ID (optional)
      responses:
        '200':
          description: List of endpoints or a single endpoint
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Endpoint'
    post:
      summary: Create a new endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'
      responses:
        '201':
          description: Endpoint created successfully
    put:
      summary: Update an existing endpoint
      parameters:
        - name: endpoint_id
          in: query
          required: true
          schema:
            type: integer
          description: Endpoint ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Endpoint'
      responses:
        '200':
          description: Endpoint updated successfully
    delete:
      summary: Delete an endpoint by ID
      parameters:
        - name: endpoint_id
          in: query
          required: true
          schema:
            type: integer
          description: Endpoint ID
      responses:
        '200':
          description: Endpoint deleted successfully

  /schedule:
    get:
      summary: Retrieve a list of schedules or a specific schedule by ID
      parameters:
        - name: schedule_id
          in: query
          schema:
            type: integer
          description: Schedule ID (optional)
      responses:
        '200':
          description: List of schedules or a single schedule
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
    post:
      summary: Create a new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '201':
          description: Schedule created successfully
    put:
      summary: Update an existing schedule
      parameters:
        - name: schedule_id
          in: query
          required: true
          schema:
            type: integer
          description: Schedule ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: Schedule updated successfully
    delete:
      summary: Delete a schedule by ID
      parameters:
        - name: schedule_id
          in: query
          required: true
          schema:
            type: integer
          description: Schedule ID
      responses:
        '200':
          description: Schedule deleted successfully

  /entityconfig:
    get:
      summary: Retrieve a list of entity configurations or a specific configuration by ID
      parameters:
        - name: config_id
          in: query
          schema:
            type: integer
          description: Configuration ID (optional)
      responses:
        '200':
          description: List of entity configurations or a single configuration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EntityConfiguration'
    post:
      summary: Create a new entity configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityConfiguration'
      responses:
        '201':
          description: Entity configuration created successfully
    put:
      summary: Update an existing entity configuration
      parameters:
        - name: config_id
          in: query
          required: true
          schema:
            type: integer
          description: Configuration ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityConfiguration'
      responses:
        '200':
          description: Entity configuration updated successfully
    delete:
      summary: Delete an entity configuration by ID
      parameters:
        - name: config_id
          in: query
          required: true
          schema:
            type: integer
          description: Configuration ID
      responses:
        '200':
          description: Entity configuration deleted successfully

  /configkeys:
    get:
      summary: Retrieve a list of configuration keys or a specific key by its name
      parameters:
        - name: config_key
          in: query
          schema:
            type: string
          description: Configuration key (optional)
      responses:
        '200':
          description: List of configuration keys or a single key
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConfigKey'
    post:
      summary: Create a new configuration key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigKey'
      responses:
        '201':
          description: Configuration key created successfully
    put:
      summary: Update an existing configuration key
      parameters:
        - name: config_key
          in: query
          required: true
          schema:
            type: string
          description: Configuration key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigKey'
      responses:
        '200':
          description: Configuration key updated successfully
    delete:
      summary: Delete a configuration key by its name
      parameters:
        - name: config_key
          in: query
          required: true
          schema:
            type: string
          description: Configuration key
      responses:
        '200':
          description: Configuration key deleted successfully

  /login:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Authentication failed

  /thingspeak:
    get:
      tags:
        - ThingSpeak
      summary: Retrieve device data from ThingSpeak with optional filters
      description: >
        Retrieves data from the ThingSpeak API. If patient_id/passport_code and device_id/mac_address are provided,
        data for a single channel is returned. If only patient_id/passport_code is provided, data for all channels
        (devices) associated with the patient is returned.
      parameters:
        - name: patient_id
          in: query
          schema:
            type: string
          description: Patient ID (optional)
        - name: passport_code
          in: query
          schema:
            type: string
          description: Passport code (optional)
        - name: device_id
          in: query
          schema:
            type: string
          description: Device ID (optional)
        - name: mac_address
          in: query
          schema:
            type: string
          description: MAC address (optional)
        - name: results
          in: query
          schema:
            type: integer
          description: Number of entries to retrieve (maximum 8,000)
        - name: days
          in: query
          schema:
            type: integer
          description: Number of 24-hour periods before now to include in response (default is 1)
        - name: minutes
          in: query
          schema:
            type: integer
          description: Number of 60-second periods before now to include in response (default is 1440)
        - name: start
          in: query
          schema:
            type: string
          description: Start date in format YYYY-MM-DD%20HH:NN:SS
        - name: end
          in: query
          schema:
            type: string
          description: End date in format YYYY-MM-DD%20HH:NN:SS
        - name: timezone
          in: query
          schema:
            type: string
          description: Time zone identifier
      responses:
        '200':
          description: Device data retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    Device_id:
                      type: string
                    Sensors:
                      type: array
                      items:
                        type: object
                        properties:
                          Name:
                            type: string
                          Values:
                            type: array
                            items:
                              type: object
                              properties:
                                created_at:
                                  type: string
                                value:
                                  type: string
        '400':
          description: Invalid request parameters
        '500':
          description: Server error retrieving device data

components:
  schemas:
    Patient:
      type: object
      properties:
        name:
          type: string
        address:
          type: string
        emergency_contact:
          type: string
        passport_code:
          type: string
        admin_id:
          type: integer
    Device:
      type: object
      properties:
        mac_address:
          type: string
        device_name:
          type: string
        device_type:
          type: string
        location:
          type: string
        is_active:
          type: boolean
        patient_id:
          type: integer
        admin_id:
          type: integer
        thingspeak_channel_key:
          type: string
    DeviceEntity:
      type: object
      properties:
        entity_type:
          type: string
        entity_name:
          type: string
        device_id:
          type: integer
        is_active:
          type: boolean
        last_reading:
          type: string
        last_reading_timestamp:
          type: string
        service_id:
          type: integer
        thingspeak_field_id:
          type: integer
    TelegramBot:
      type: object
      properties:
        bot_token:
          type: string
        chat_id:
          type: string
        patient_id:
          type: integer
    Endpoint:
      type: object
      properties:
        service_id:
          type: integer
        entity_id:
          type: integer
        endpoint:
          type: string
    Schedule:
      type: object
      properties:
        entity_id:
          type: integer
        day_of_week:
          type: string
          enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
        start_time:
          type: string
        end_time:
          type: string
        action:
          type: string
          enum: [ON, OFF]
        repeat:
          type: boolean
    EntityConfiguration:
      type: object
      properties:
        entity_id:
          type: integer
        config_key:
          type: string
        config_value:
          type: string
    ConfigKey:
      type: object
      properties:
        config_key:
          type: string
        description:
          type: string
        value_type:
          type: string
          enum: [numeric, boolean, string, json]
        apply_to:
          type: string
          enum: [sensor, actuator]
    Login:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        status:
          type: string
        user:
          type: object
